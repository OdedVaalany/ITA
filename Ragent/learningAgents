import random
import util

class QLearningAgent:
    def __init__(self, alpha = 0.5 , epsilon = 0.5,discount = 0.9, getLegalActions = None , board = None) -> None:
        self.alpha = alpha
        self.epsilon =epsilon
        self.discount = discount
        self.q_values = {}
        self.getActions = getLegalActions
        self.board = board


    def getLegalActions(self,cell):
        return self.getActions(cell)

    def getQValue(self, cell, action):
        """
          Returns Q(state,action)
          Should return 0.0 if we never seen
          a state or (state,action) tuple
        """
        state = self.getState(self.board,cell)
        if self.Q.get(state) is None:
            self.Q[state] = {
                state: 0 for state in self.getLegalActions(state)}
        return self.Q[state][action]
    def getState(self,board,cell):
        row = cell[0]
        col = cell[1]
        rowMinIndex = row -2
        rowMaxIndex = row +2
        colMinIndex = col -2
        colMaxIndex = col +2
        state = []
        for boardRow in range(rowMinIndex,rowMaxIndex+1):
            state.append([])
            for boardCol in range(colMinIndex,colMaxIndex+1):
                if boardRow < 0 or boardRow >= len(board) or boardCol < 0 or boardCol >= len(board[0]):
                    state[boardRow].append('W')
                else:
                    state[boardRow].append(board[boardRow][boardCol])
        return self.matrixToString(state)

    def matrixToString(self,matrix):
        return '\n'.join([''.join(row) for row in matrix])
    def getValue(self, state):
        """
          Returns max_action Q(state,action)
          where the max is over legal actions.  Note that if
          there are no legal actions, which is the case at the
          terminal state, you should return a value of 0.0.
        """
        possible_actions = self.getLegalActions(state)
        if len(possible_actions) == 0:
            return 0.0
        return max([(action, self.getQValue(state, action))
                    for action in possible_actions], key=lambda x: x[1])[1]

    def getPolicy(self, state):
        """
          Compute the best action to take in a state.  Note that if there
          are no legal actions, which is the case at the terminal state,
          you should return None.
        """
        possible_actions = self.getLegalActions(state)
        best_actions = []
        for ac in possible_actions:
            if self.getQValue(state, ac) == self.getValue(state):
                best_actions.append(ac)
        if best_actions == []:
            return None
        return random.choice(best_actions)

    def getAction(self, state):
        """
          Compute the action to take in the current state.  With
          probability self.epsilon, we should take a random action and
          take the best policy action otherwise.  Note that if there are
          no legal actions, which is the case at the terminal state, you
          should choose None as the action.

          HINT: You might want to use util.flipCoin(prob)
          HINT: To pick randomly from a list, use random.choice(list)
        """
        # Pick Action
        legalActions = self.getLegalActions(state)
        action = None
        if len(legalActions) != 0:
            if util.flipCoin(self.epsilon):
                action = random.choice(legalActions)
            else:
                action = self.getAction(state)
        return action
    

    def update(self, state, action, nextState, reward):
        """
          The parent class calls this to observe a
          state = action => nextState and reward transition.
          You should do your Q-Value update here

          NOTE: You should never call this function,
          it will be called on your behalf
        """
        if nextState == 'TERMINAL_STATE':
            self.Q[state][action] = reward
            return
            # Q(s, a) = Q(s, a) + alpha * (reward + gamma * max_a'(Q(s', a')) - Q(s, a))
        self.Q[state][action] = self.getQValue(state, action) + self.alpha * (
            reward + self.discount * max([self.getQValue(nextState, a) for a in self.getLegalActions(nextState)]) - self.getQValue(state, action))
